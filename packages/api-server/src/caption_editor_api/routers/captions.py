"""Caption processing router."""

from typing import List, Optional
from fastapi import APIRouter, UploadFile, File, HTTPException
from pydantic import BaseModel

router = APIRouter()


class CaptionSegment(BaseModel):
    """Caption segment model."""
    
    id: str
    start_time: float
    end_time: float
    text: str


class CaptionFile(BaseModel):
    """Caption file model."""
    
    segments: List[CaptionSegment]
    language: Optional[str] = "en"
    format: Optional[str] = "vtt"


class TranscriptionRequest(BaseModel):
    """Request model for AI transcription."""
    
    video_url: Optional[str] = None
    language: Optional[str] = "en"


class TranscriptionResponse(BaseModel):
    """Response model for AI transcription."""
    
    status: str
    job_id: Optional[str] = None
    captions: Optional[CaptionFile] = None
    message: str


@router.post("/captions/upload", response_model=CaptionFile)
async def upload_caption_file(file: UploadFile = File(...)):
    """Upload and parse a caption file (VTT/SRT)."""
    if not file.filename or not file.filename.endswith(('.vtt', '.srt')):
        raise HTTPException(
            status_code=400, 
            detail="Only VTT and SRT files are supported"
        )
    
    # TODO: Implement actual file parsing
    # This is a placeholder response
    return CaptionFile(
        segments=[
            CaptionSegment(
                id="1",
                start_time=0.0,
                end_time=3.0,
                text="Sample caption segment"
            )
        ]
    )


@router.post("/captions/transcribe", response_model=TranscriptionResponse)
async def transcribe_video(request: TranscriptionRequest):
    """Start AI transcription of a video."""
    if not request.video_url:
        raise HTTPException(
            status_code=400,
            detail="Video URL is required"
        )
    
    # TODO: Implement AssemblyAI integration
    # This is a placeholder response
    return TranscriptionResponse(
        status="processing",
        job_id="mock-job-123",
        message="Transcription started successfully"
    )


@router.get("/captions/transcribe/{job_id}", response_model=TranscriptionResponse)
async def get_transcription_result(job_id: str):
    """Get transcription result by job ID."""
    # TODO: Implement actual job status checking
    # This is a placeholder response
    return TranscriptionResponse(
        status="completed",
        job_id=job_id,
        captions=CaptionFile(
            segments=[
                CaptionSegment(
                    id="1",
                    start_time=0.0,
                    end_time=3.5,
                    text="This is a sample transcribed caption."
                ),
                CaptionSegment(
                    id="2", 
                    start_time=3.5,
                    end_time=7.0,
                    text="Generated by AI transcription service."
                )
            ]
        ),
        message="Transcription completed successfully"
    )